# C++作业
## 9.1
```
vector<int> vec;   
vector<int> vec(10);    
vector<int> vec(10,1);  
vector<int> vec{1,2,3,4,5}; 
vector<int> vec(other_vec); 
vector<int> vec(other_vec.begin(), other_vec.end());
```
## 9.20
```
#include<iostream>
#include<deque>
#include<list>

using namespace std;

int main() {
    list<int> ori = { 1,2,3,4,5,6 };
    deque<int> odd, even;
    for (auto i : ori) {
        if (i % 2) {
            even.push_back(i);
        }
        else {
            odd.push_back(i);
        }
    }
    for (auto i : odd) {
        cout << i << " ";
    }
    cout << endl;
    for (auto i : even) {
        cout << i << " ";
    }

    system("pause");
    return 0;
}
```
## 9.29
调用vec.resize(100)会向vec末尾添加75个元素，这些元素将进行值初始化。
接下来调用vec.resize(10)会将vec末尾的90个元素删除。
## 9.43
```
#include<iostream>
#include<string>

using namespace std;

void func(string &s, string &oldVal, string &newVal) {
    auto iter = s.begin();
    while (iter + oldVal.size() != s.end()) {
        if (oldVal == string(iter, iter + oldVal.size())) {
            iter = s.erase(iter, iter + oldVal.size());
            iter = s.insert(iter, newVal.begin(), newVal.end());
            iter += newVal.size();
        }
        else {
            ++iter;
        }
    }
}

int main() {
    string s("though,you don't love me");
    string oldVal("though");
    string newVal("tho");
    func(s, oldVal, newVal);
    cout << s;

    system("pause");
    return 0;
}
```
## 9.52
```
#include<iostream>
#include<stack>
#include<string>
using namespace std;

bool isnum(char a) {
    if (a >= '0'&&a <= '9') {
        return true;
    }
    else return false;
}

int main() {
    string expr("(1+2)+(3+4)+5");
    stack<char> st;
    int sum = 0;
    int len = expr.size();
    for (int i = 0;i < len;i++) {
        if (expr[i] == '('|| isnum((expr[i]))) {
            st.push(expr[i]);
        }
        else if (expr[i] == '+') {
            continue;
        }
        else if (expr[i] == ')') {
            while (st.top() != '(') {
                sum += st.top() - '0';
                st.pop();
            }
            st.pop();
        }
    }
    while (!st.empty()) {
        sum += st.top() - '0';
        st.pop();
    }
    cout << sum << endl;

    system("pause");
    return 0;
}
```
## 10.3
```
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<numeric>
using namespace std;
 
int main(int argc, char**argv)
{
	int a[10] = {0,1,2,5,4,5,4,5,4,5};
	vector<int> vec(a,a+10);
	cout<<"元素之和为："<<accumulate(vec.begin(),vec.end(),0);
 
	return 0;
}
```
## 10.15
```
#include<iostream>
using namespace std;

int main() {
    int a = 1;
    auto f = [a](int b) {return a + b;};
    cout << f(2) << endl;
    
    system("pause");
    return 0;
}
```
## 10.34
```
#include<vector>  
#include<algorithm>  
#include<numeric>  
#include<functional>
#include<iterator>
using namespace std;
using namespace placeholders;
 
int main(int argc, char**argv)  
{  
	int a[5] = {1,2,3,4,5};
	vector<int> day1(a,a+5);
 
	for (auto it1 = day1.rbegin(); it1 != day1.rend() ; ++it1)
	{
		cout<<*it1<<" ";
	}
 
	return 0;  
} 
```
## 10.42
```

#include<iostream>  
#include<fstream>
#include<string>  
#include<vector> 
#include<list>
#include<algorithm>  
#include<numeric>  
#include<functional>
#include<iterator>
using namespace std;
using namespace placeholders;
 
int main(int argc, char**argv)  
{ 
	string a[10] = {"sdc","sddc","sdec","sfdc","sdec","sdc","sdc","fsdc","sadc","fsdc"};
	list<string> list1(a,a+10);
	list1.sort();
	list1.unique();
	for (auto it1 = list1.begin(); it1 != list1.end(); ++it1)
	{
		cout<<*it1<<" ";
	}
 
	return 0;  
} 
```
## 11.12
```
#include<vector>
#include<utility>
#include<iostream>
#include<string>
using namespace std;

int main() {
    vector<pair<string,int>> vec;
    size_t i = 0;
    string s;
    int num;
    while (cin >> s >> num) {
        vec.push_back({ s,num });
        ++i;
    }
    for (auto i : vec) {
        cout << i.first << " " << i.second << endl;
    }
    system("pause");
    return 0;
}
```
## 11.17
第三个不合法，back_inserter()需要用到push_back()，而set没有；其余合法。
## 11.38
### 单词计数程序
```
#include <unordered_map>
#include <string>
#include <iostream>

using namespace std;

int main()
{
    unordered_map<string, size_t> word_count;
    string word;
    while(cin >> word)
        ++word_count[word];

    for(const auto &w : word_count)
        cout << w.first << "," << w.second << endl;

    return 0;
}
```
### 单词转换程序
```
#include<iostream>
#include<string>
#include<unordered_map>
#include<fstream>
#include<sstream>

using namespace std;

unordered_map<string, string> buildMap(ifstream &map_file) {
    unordered_map<string, string> trans_map;
    string key;
    string value;
  
    while (map_file >> key && getline(map_file, value)) {
        if (value.size() > 1) {
            trans_map[key] = value.substr(1);
        }
        else {
            throw runtime_error("no rule for " + key);
        }
    }
    return trans_map;
}


const string & transform(const string &s, const unordered_map<string, string> &m) {
    auto map_it = m.find(s);
    if (map_it != m.cend()) {
        return map_it->second;
    }
    else {
        return s;
    }
}

void word_transform(ifstream &map_file, ifstream &input) {
    auto trans_map = buildMap(map_file);
    string text;
    while (getline(input, text)) {
        istringstream stream(text); 
        string word;
        bool firstword = true; 
        while (stream >> word) {
            if (firstword) {
                firstword = false;
            }
            else cout << " ";
            cout << transform(word, trans_map); 
        }
        cout << endl;
    }
}

int main() {
    ifstream map_file("book.txt"), input("test.txt");
    word_transform(map_file, input);
    system("pause");
    return 0;
}
```
## 13.12
三次：accum，item1，item2
## 13.18
```
#include<iostream>
#include<string>

using namespace std;

class Employee {
private:
  static int sn;
  
public:
  Employee () { mysn = sn++ }
  Employee (const string &s) { name = s; mysn = sn++;  }
  
  const string &get_name() { return name; }
  int get_mysn() {return mysn;}
  
private:
  string name;
  int mysn;
};

int Employee::sn = 0;

void f(Employee &s)
{
  cout << s.get_name() << ":" << s.get_mysn() << endl;
}

int main(int argc, char **argv)
{
  Employee a("赵"), b = a, c;
  c = b;
  f(a);
  f(b);
  f(c);
  
  return 0;
}
```
## 13.46
r1右值引用
r2左值引用
r3左值引用
r4右值引用
## 13.49
```
String& String::operator=(String&& rhs) NOEXCEPT
{
	if (this != &rhs) {
		free();
		elements = rhs.elements;
		end = rhs.end;
		rhs.elements = rhs.end = nullptr;
	}
	return *this;
}
String::String(String&& s) NOEXCEPT : elements(s.elements), end(s.end)
{
	s.elements = s.end = nullptr;
}
```
## 13.58
```

#include <vector>
#include <iostream>
#include <algorithm>
 
using std::vector;
using std::sort;
 
class Foo {
public:
	Foo sorted()&&;
	Foo sorted() const&;
 
private:
	vector<int> data;
};
 
Foo Foo::sorted() &&
{
	sort(data.begin(), data.end());
	std::cout << "&&" << std::endl; // debug
	return *this;
}
 
Foo Foo::sorted() const &
{
	std::cout << "const &" << std::endl; // debug
 
	return Foo(*this).sorted(); //13.57
}
 
int main()
{
	Foo().sorted(); // call "&&"
	Foo f;
	f.sorted(); // call "const &"
}
```
## 14.3
(a)"cobble" == "store"，比较两个指针
(b)string版本的重载==
(c)vector版本的重载==
(d)string版本的重载==
## 14.20
```
class Sales_data
{
	friend Sales_data operator+(const Sales_data &lhs, const Sales_data &rhs);
public:
	Sales_data& operator+=(const Sales_data &rhs);
	//其他成员
};
Sales_data operator+(const Sales_data &lhs, const Sales_data &rhs)
{
	Sales_data sum = lhs;
	sum += rhs;
	return sum;
}
Sales_data& Sales_data::operator+=(const Sales_data &rhs)
{
	units_sold += rhs.units_sold;
	revenue += rhs.revenue;
	return *this;
}
```
## 14.38
```
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using std::istream;
using std::cout;
using std::cin;
using std::endl;
using std::vector;
using std::string;
 
class StrLenIs
{
public:
	StrLenIs(int len) : len(len) { }
	bool operator()(const string &str) { return str.length() == len; }
 
private:
	int len;
};
 
void readStr(istream &is, vector<string> &vec)
{
	string word;
	while (is >> word)
	{
		vec.push_back(word);
	}
}
 
int main()
{
	vector<string> vec;
	readStr(cin, vec);
	const int minLen = 1;
	const int maxLen = 10;
	for (int i = minLen; i <= maxLen; ++i)
	{
		StrLenIs slenIs(i);
		cout << "len: " << i << ", cnt: " << count_if(vec.begin(), vec.end(), slenIs) << endl;
	}
 
	return 0;
}
```
## 14.52
```
struct LongDouble {
   LongDouble operator+(const SmallInt&); // 1
};
LongDouble operator+(LongDouble&, double); // 2
SmallInt si;
LongDouble ld;
ld = si + ld;  
ld = ld + si; 
 
14.53
SmallInt s1;
double d = s1 + 3.14;
```
## 15.12
有必要。
override意味着重载父类中的虚函数，final意味着禁止子类重载该虚函数。
两个用法并不冲突。
## 15.16
```
class Limit_quote : public Disc_quote
{
public:
    Limit_quote() = default;
    Limit_quote(const std::string& b, double p, std::size_t max, double disc):
        Disc_quote(b, p, max, disc)  {   }

    double net_price(std::size_t n) const override
    { return n * price * (n < quantity ? 1 - discount : 1 ); }
};
```
## 15.30
```
#include <iostream>
#include <memory>
#include <set>
#include "Quote.h"

using namespace std;

class Basket
{
public:
    void add_item(const shared_ptr<Quote> &sales)
    {
        items.insert(sales);
    }
    double total_receipt (std::ostream&) const;  
private:
    static bool compare(const std::shared_ptr<Quote> &lhs, const std::shared_ptr<Quote> &rhs)
    {
        return lhs->isbn() < rhs->isbn();
    }
    std::multiset<std::shared_ptr<Quote>, decltype(compare)*> items{compare};
};

double Basket::total_receipt(std::ostream &os) const
{
    double sum = 0.0;

    for (auto iter = items.cbegin(); iter != items.cend(); iter=items.upper_bound(*iter))
    {
        sum += print_total (os, **iter, items.count(*iter));
    }
    os << "Total Sale: " << sum << endl;
    return  sum;
}
```
